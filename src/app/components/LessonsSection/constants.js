export const lessons = [
  {
    /** Lesson id */
    id: '1',
    /** Lesson title */
    title: 'Привет React',
    /** is Pure Text */
    body: `
## Добро пожаловать на уроки реакта!
Я думаю, что вы уже знаете, что такое ReactJS, А если нет, то рекоммендую к прочтению [ReactJS](https://reactjs.org/tutorial/tutorial.html)


>    *Для того, чтобы создать ваш первый проект, вам понадобиться* ***create-react-app***

Давайте приступим к созданию первого приложения:  
.  
--------------  
\`1. в терминале запустите create-react-app <your app name>\`  
\`2. В создавшейся директории откройте файл App.js\`  
\`3. Отредактируйте текст\`  
\`4. run npm start\`    
--------------  
.  
### Поздравляю! только что вы создали своё первое React Приложение:)
`,
  },
  {
    /** Lesson id */
    id: '2',
    /** Lesson title */
    title: 'Первый компонент',
    /** is Pure Text */
    body: `
  ### Теперь давайте напишем ваш первый реакт компонент!  
  Для того, чтобы это сделать, перейдите в созданную директориб проекта  
  И перейдите к файлу **\`/src/App.js\`**
  
  Сотрите всё, что там будет сгенерировано и вставьте этот код  
  ----------  
  \`\`\`js
  var React = require('react');
  
  class App extends React.Component {
    render() {
      return <div>Мой первый реакт компонент!</div>  
    }
  }  
  \`\`\`
  ----------
     P.S. Только что вы создали ваш первый реакт компонент. Думаю, что если вы были внимательны,
     то уже заметили, как выглядит структура простейшего реакт компонента;)
  `,
  },
  {
    /** Lesson id */
    id: '3',
    /** Lesson title */
    title: 'Разбор структуры компонента',
    /** is Pure Text */
    body: `
### Структура  
  .  
  .  
  Наверняка при прошлом уроке у вас возникло ощущение, что в функции render, возвращаемое значение очень уж похоже на обычный html.
  У меня для вас новости, вы не ошиблись!) Однако возвращается не html, а **jsx** (javascript xml), который потом webpack(бандлер, который настраивается автоматически
  с помощью create-react-app и про который вам не обязательно знать в начале) транслирует в javascript код, и дальше этот js код реакт размещает на вашей веб-странице  
  .  
  .  
  Так же, как вы наверняка заметили, реакт коспонент - это js класс, который наследуется от React класса **Component**
  И метод render - это наследуемый метод этот класса, который мы можем перезаписать, и вовращать всё, что нам надо:)
  
  \`\`\`js
  var React, {Component} = require('react');
  class App extends React.Component {
    render() { /*<---- А это наш render метод, наследуемый от Component класса, предоставленного реактом*/
      return <div>Это JSX который webpack превращает в обычный JS код</div>  
    }
  }  
  \`\`\`
  По сути, это всё, что вам нужно знать для начала работы с реактом, для создания компонента нужно создать класс, дать ему имя,
  наследовать его от класса Component и перезаписать метод render()
  `,
  },
  {
    /** Lesson id */
    id: '4',
    /** Lesson title */
    title: 'State React-Компонента',
    /** is Pure Text */
    body: `
## Что такое state?  
    State - любая необходимая информация, котоую может хранить и изменять ваш компонент, например: (текущее время, прдменты которые пользователь выбрал в онлайн магазине)    
Давайте посмотрим, как использовать state в нашем реакт приложении  
(Я рассчитываю, что ваше реакт приложение запущено, а если нет, то зайдите в папку с этим приложением и запустите в консоли след. команду)  
.  
\`npm start\` - это запустит ваш dev server и откроет окно в браузере с вашим приложением  
.    
После этого, чтобы узнать, какой компонент редериться на вашей странице, перейдите к файлу:  
.  
    \`src/index.js\`  
.  
и посмотрите, где размещается файл в теле метода ReactDOM.render  
\`\`\`js  
    import React from 'react'
    import ReactDOM from 'react-dom'
    import App from './app/App' /* Перейдите к этомму файлу, чтобы редактировать компонент, который рендериться на вашем экране */

    ReactDOM.render(<App />, document.getElementById('root'))
\`\`\`
  
После того, как вы открыли компонент App (generic компонент, который генерируются автоматически с помощью **create-react-app**)  
Давайте создадим рядом с ним свой компонент, который будет показывать ваш возраст:), для этого:  
--------
\`1. Создайте файл UserAge.js \`  
\`2. В создавшемся файле создайте класс UserAge, который наследуется от класса Component (то, что мы делали в уроках выше), и перезапишите метод render, чтобы он возвращал: \`   
    <div>Мой возраст: (здесь будет мой возраст)</div>    
\`3. После этого экспортируйте ваш класс, для этого напишите export default UserAge в конце файла UserAge \`  
  
  \`\`\`js
    import React from 'react'
    
    class UserAge extends React.Component {...}
    
    export default UserAge
  \`\`\`
  
\`4. перейдите обратно в компонет App, импортируйте компонент UserAge и используйте его точно так-же, если бы использовали обычный html компонент \`    
  \`\`\`js
    import React from 'react'
    import UserAge from './UserAge' /* Экспорт/Импорт компонентов доступен с помощью настроенного create-react-app вебпака(webpack)*/
    
    class App extends React.Component {
        render() {
            return <UserAge />
        }
    }
  \`\`\`    

### Если всё прошло хорошо, то на вашем экране должно появиться сообщения из render метода компонента *UserAge*  
.  
Теперь давайте перейдём к **одной из самый фундаментальных частей реакта**, использованию состояния компонента (чтобы вас не пугало состояние компонента, можете про себя говорить
состояние - это хранение информации внутри компонента)

\`Откройте снова файл UserAge \`

Состояние компонента как правило зраниться в js объекте, и для того, чтобы создать его, напишите  
\`\`\`js
    state = {
        myAge: 19
    }
  \`\`\` 
перед методом render в классе UserAge, должно получиться примерно так:
    \`\`\`js
    import React from 'react'
    
    class UserAge extends React.Component {
        state = {
            myAge: 19
        }
        render() {
            return <div>Мой возраст: (здесь будет мой возраст)</div>
        }
    }
    
    export default UserAge
    \`\`\`
    
.  
---------

Что же нужно сделать, чтобы использовать то самое поле **myAge** из объекта **state** в теле метода render?  
Для этого в JSX нужно использовать curly braces это они -> {}, давайте я покажу наглядно, чтобы вы могли это увидеть и попробовать  

\`\`\`js
    import React from 'react'
    
    class UserAge extends React.Component {
        state = {
            myAge: 19
        }
        render() {
            return <div>Мой возраст: {this.state.myAge}</div>
        }
    }
    
    export default UserAge
\`\`\`  

.  

Теперь ваш компонент должен выводить ваш возраст, поздравляю, вы только что использовали фундаментальную вещь, без которой практически невозможно реакт-разработка:)  

.  

Внутри {} вы можете писать любые js выражения, главное условие - оттуда должно возвращаться какое-то значение, например:  

.  

\`\`\`js
    import React from 'react'
    
    class UserAge extends React.Component {
        state = {
            myAge: 19
        }
        render() {
            return <div>Мой возраст: {
            state.myAge >= 18 /* Здесь использован тернарный оператор, спросите у преподователя, если не знате, что это, а лучше загуглите:) */ 
            ? <div>Я совершеннолетний</div> 
            : <p>Я ещё не совершеннолетний</p>
            }</div>
        }
    }
    
    export default UserAge
\`\`\`    
   
  Теперь вы можете использовать State внутри компонентов, круто! Осталось только поговорить о Props (свойства, пропсы)
  `,
  },
  {
    /** Lesson id */
    id: '5',
    /** Lesson title */
    title: 'Использование Props (передаваемых свойств) компонента',
    /** is Pure Text */
    body: `
### Свойства (Props)  
Свойства используются для того, чтобы передать информацию из одного компонента в другой, это делается очень легко.  
  
\`Перейдите в компонент App где вы используете ваш компонент UserAge и сделайте следующее \`  
  
И в теле компонента передайте свойство вашего имени  
  
\`\`\`js
    ...
    class App extends React.Component {  
        render() {
          return <UserAge myNamePassedInProps='Моё крутое имя'/>
        }
    }
    ...
\`\`\`      

Только что мы передали в компонент UserAge свойство \`myNamePassedInProps \`  

Чтобы получить это свойство в нашем компоненте UserAge давайте перейдём к нему и получим его похожим образом, как получали данные из state  

\`\`\`js
    import React from 'react'
    
    class UserAge extends React.Component {
        state = {
            myAge: 19
        }
        render() {
            const { myNamePassedInProps } = this.props /* Это называется object-deconstruction, обратитесь к преподователя к объяснениям, или загуглите */
            return <div>Меня зовут {myNamePassedInProps}, мой возраст: {this.state.myAge}</div>
        }
    }
    
    export default UserAge
\`\`\`  

Вот таким нехитрым способом вы можете передавать свойства в ваш реакт-компонент

### В этих уроках вы узнали самые основные функции реакта  
.  
state, props, из чего состоит реакт компонент, после этого вам стоит узнать, что такое webpack, а так же продвинутые react-patterns (паттерны разработки реакт-приложений)
.  
# Удачи:) 

  `,
  },
]
