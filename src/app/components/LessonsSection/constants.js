export const lessons = [
  {
    id: 'intro',
    title: 'NodeJS и NPM',
    body: `
# NodeJS и NPM

Для того, чтобы создать ваше первое React приложение для начала вам понадобиться:  
- [NodeJS](https://nodejs.org/en/)
- npm - должен установиться вместе с NodeJS  

После того, после установки NodeJS проверьте, что всё поставилось правильно, для этого введите в терминале

\`\`\`sh
$ node -v
$ npm -v
\`\`\`
Эти две комманды должны вывести версию установленных пакетов.  
    `,
  },
  {
    id: 'create-react-app',
    title: 'create-react-app',
    body: `
# create-react-app

После установки NodeJS и NPM, нужно установить create-react-app (сетаппер react приложений от facebook).
Для того, чтобы это сделать, введите в терминале

\`\`\`sh
$ npm install -g create-react-app         (Это установит crate-react-app на вашу систему *если вы на системе Linux/MacOS, перед коммандой введите sudo)
$ create-react-app -v                     (Проверка что пакет установился нормально)
\`\`\`
    `,
  },
  {
    /** Lesson id */
    id: 'react-setup',
    /** Lesson title */
    title: 'Привет React',
    /** is Pure Text */
    body: `
# Добро пожаловать на уроки реакта!  

Я думаю, что вы уже знаете, что такое ReactJS, А если нет, то рекоммендую к прочтению [статьи о ReactJS](https://teletype.in/@rupper/BJEtj2djX)

Давайте приступим к созданию первого приложения, для этого:  

- Перейдите в терминале в нужную вам директорию и запустите  

\`\`\`sh
$ create-react-app testing
\`\`\`
Эта комманда создаст все необходимые файлы и настроит нужные тулы, чтобы реакт-приложение могло ожить:)

- После того, как приложение создасться, перейдите в терминале в созданную директорию и введите
\`\`\`sh
$ npm start
\`\`\`

После этой комманды должно открыться окно браузера с адресом [http://localhost:3000](http://localhost:3000)

Если окно браузера не открылось - попробуйте открыть его самостоятельно (кликните на ссылку, которую я выделил)

После всех действий у вас должно быть стартовое окно с сообщением от React-разработчиков, поздравляю, вы только что создали своё первое React-приложение:)
`,
  },
  {
    /** Lesson id */
    id: 'first-react-change',
    /** Lesson title */
    title: 'Первый компонент',
    /** is Pure Text */
    body: `
# Теперь давайте напишем ваш первый реакт компонент!  

Для того, чтобы это сделать, перейдите в созданную директорию проекта  
и перейдите к файлу **\`/src/App.js\`**

Сотрите всё, что там будет сгенерировано и вставьте этот код  

\`\`\`js
import React, { Component } from 'react';

class App extends Component { /* Создаём класс наследуемый от класса Component, доступный из библиотеки React*/
  render() { /* Перезаписываем метод render и возвращаем, что нам нужно */
     return <div>Мой первый реакт компонент!</div>  
  }
}  

export default App
\`\`\`

 P.S. Только что вы создали ваш первый реакт компонент. Думаю, что если вы были внимательны,
 то уже заметили, как выглядит структура простейшего реакт компонента;)
  `,
  },
  {
    /** Lesson id */
    id: 'component-structure',
    /** Lesson title */
    title: 'Разбор структуры компонента',
    /** is Pure Text */
    body: `
# Структура  

Наверняка при прошлом уроке у вас возникло ощущение, что в функции render, 
возвращаемое значение очень уж похоже на обычный html.
У меня для вас новости, вы не ошиблись!) Однако возвращается не html, 
а [**jsx** (JavaScript XML)](https://stackoverflow.com/questions/39461805/what-does-jsx-stand-for), 
который потом [webpack](https://survivejs.com/webpack/what-is-webpack/)(бандлер, который настраивается автоматически
с помощью create-react-app и про который вам не обязательно знать в начале) 
транслирует в javascript код, и дальше этот js код реакт размещает на вашей веб-странице  
  
Так же, как вы наверняка заметили, реакт компонент - это js класс, который наследуется от React класса **Component**
И метод render - это наследуемый метод этот класса, который мы можем перезаписать, и вовращать всё, что нам надо:)

\`\`\`js
var React, {Component} = require('react');
class App extends React.Component {
  render() { /*<---- А это наш render метод, наследуемый от Component класса, предоставленного реактом*/
    return <div>Это JSX который webpack превращает в обычный JS код</div>  
  }
}  
\`\`\`
По сути, это всё, что вам нужно знать для начала работы с реактом, для создания компонента нужно создать класс, дать ему имя,
наследовать его от класса Component и перезаписать метод render()
`,
  },
  {
    /** Lesson id */
    id: 'component-state',
    /** Lesson title */
    title: 'State React-Компонента',
    /** is Pure Text */
    body: `
# Что такое state?
  
>  State - любая необходимая информация, котоую может хранить и изменять ваш компонент, например: (текущее время, прдменты которые пользователь выбрал в онлайн магазине) 

Давайте посмотрим, как использовать state в нашем реакт приложении  
(Я рассчитываю, что ваше реакт приложение запущено, а если нет, то перейдите с помощью терминала в директорию с этим приложением и запустите в консоли след. команду)

\`npm start\` - это запустит ваш dev server и откроет окно в браузере с вашим приложением

После этого, чтобы узнать, какой компонент редериться на вашей странице, перейдите к файлу:  \`src/index.js\`
и посмотрите, где размещается файл в теле метода \`ReactDOM.render\`

\`\`\`js  
import React from 'react'
import ReactDOM from 'react-dom'
import App from './app/App' /* Перейдите к этомму файлу, чтобы редактировать компонент, который рендериться на вашем экране */

ReactDOM.render(<App />, document.getElementById('root'))
\`\`\`

После того, как вы открыли файд App.js с компонентом App (компонент, который генерируются автоматически с помощью **create-react-app**)

Давайте создадим рядом с ним свой компонент, который будет показывать ваш возраст:), для этого:  

1. Создайте файл \`UserAge.js \`
2. В создавшемся файле создайте класс \`UserAge\`, который наследуется от класса \`Component\` (то, что мы делали в уроках выше), и перезапишите метод \`render\`, чтобы он возвращал:

\`\`\`js
<div>Мой возраст: (здесь будет мой возраст)</div>
\`\`\`

3. После этого экспортируйте ваш класс, для этого напишите \`export default UserAge\` в конце файла \`UserAge\`


\`\`\`js
import React from 'react'

class UserAge extends React.Component {...}

export default UserAge /*Экспорт и импорт файлов доступен благодоря настроенного с помощью create-react-app webpack-бандлера */
\`\`\`
  
4. Перейдите обратно к компоненту \`App\`, импортируйте компонент \`UserAge\` и используйте его точно так-же, если бы использовали обычный html компонент


\`\`\`js
import React from 'react'
import UserAge from './UserAge'

class App extends React.Component {
    render() { /*Использование экспортированных React-Компонентов*/
        return <UserAge />
    }
}
\`\`\`

### Если всё прошло хорошо, то на вашем экране должно появиться сообщения из \`render\` метода компонента \`UserAge\`

Теперь давайте перейдём к **одной из самый фундаментальных частей реакта**, использованию \`состояния*\` компонента
> *чтобы вас не пугало состояние компонента, можете про себя говорить, состояние - это хранение информации внутри компонента:)

Снова откройте файл \`UserAge \`

Состояние компонента как правило храниться в js объекте, и для того, чтобы создать его, перед методом \`render\` в классе \`UserAge\` напишите

\`\`\`js
state = {
    myAge: 19
}
\`\`\` 

Должно получиться примерно так:

\`\`\`js
import React from 'react'

class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    render() {
        return <div>Мой возраст: (здесь будет мой возраст)</div>
    }
}
    
export default UserAge
\`\`\`

Что же нужно сделать, чтобы использовать то самое поле \`myAge\` из объекта \`state\` в теле метода \`render\`?  

Для этого в \`JSX\` нужно использовать curly braces это они -> \`{}\`, давайте я покажу наглядно, чтобы вы могли это увидеть и попробовать

\`\`\`js
import React from 'react'

class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    render() { /* Здесь используются {} */
        return <div>Мой возраст: {this.state.myAge}</div>
    }
}

export default UserAge
\`\`\`  

Теперь ваш компонент должен выводить ваш возраст, поздравляю, вы только что использовали фундаментальную вещь, без которой практически невозможна реакт-разработка:)  

Внутри \`{}\` вы можете писать \`любые* js выражения\` 
> *любые, но главное условие - оттуда должно возвращаться какое-то значение (\`jsx/string/number/etc\`), например:

> *Писать JS Expressions можно только внутри компонентов

\`\`\`js
import React from 'react'

class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    render() {
        return <div> Мой возраст: {this.state.myAge} { // По сути, внутри {} в JSX вы можете писать обычный JavaScript код
        this.state.myAge >= 18
        ? <span> Я совершеннолетний </span> // Это тернарный оператор
        : <p> Я ещё не совершеннолетний </p>
        }</div>
    }
}

export default UserAge
\`\`\`    
   
#### **Теперь вы можете использовать State внутри компонентов, круто! Но нам как-то нужно изменить наш возраст**
  `,
  },
  {
    id: 'set-state',
    title: 'Давайте изменим State',
    body: `
# Давайте изменим \`State\`

В прошлом уроке мы создали компонент \`UserAge\`, который показывал наш возраст, а так же говорил, совершеннолитний пользователь, или нет

В идеальном мире нам ничего не пришлось бы и менять, однако вечно молодыми мы не сможем остаться, поэтому придётся добавить кнопку **"Постареть"**, которая будет добавлять нам год возраста:)

> NOTE: \`render\` метод может возвращать **только 1 JSX компонент**  

Поскольку наш рендер метод может возвращать только один компонент, а мы не хотим захламлять наш HTML документ лишними дивами, мы обернём возвращаемые значения в \`Fragment\` компонент, предоставляемый реактом

> По сути \`Fragment\` используется, чтобы не возвращать лишний \`div\`, который нужен, чтобы из рендер метода возвращался только 1 компонент

\`\`\`js
import React, { Fragment } from 'react' /* Обратите внимание, что мы импортируем Fragment компонент */

class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    render() {
        const ADULT_AGE = 21;
        return <Fragment>
            <div> Мой возраст: {this.state.myAge} { // По сути, внутри {} в JSX вы можете писать обычный JavaScript код
             this.state.myAge >= ADULT_AGE
            ? <span> Я совершеннолетний </span> // Это тернарный оператор
            : <span> Я ещё не совершеннолетний </span>
            }</div>
            {/*Обратите внимание, я пишу комментарий внутри {}, поскольку комментарий - это js*/}
            {/*Мы создали нашу кнопку:)*/}
            <button>Постареть!</button>
        <Fragment>
    }
}

export default UserAge
\`\`\`
Пока что наша кнопка не может ничего сделать, поэтому давайте я расскажу про \`setState\`

#### \`setState\` Используется, чтобы изменить значение объекта \`state\` компонента,

Не буду томить, покажу, как мы можем это использовать 

\`\`\`js
class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    // создадим callback, который будет срабатывать по нажатию на кнопку
    // NOTE: я использую arrow function, поэтому контект этой функции (this), будет принадлежать классу
    onAddUserAge = (e) => {
        this.setState({
            myAge: this.state.myAge + 1
        })
    }
    render() {
        const ADULT_AGE = 21;
        return <Fragment>
            <div> Мой возраст: {this.state.myAge} { // По сути, внутри {} в JSX вы можете писать обычный JavaScript код
             this.state.myAge >= ADULT_AGE
            ? <span> Я совершеннолетний </span> // Это тернарный оператор
            : <span> Я ещё не совершеннолетний </span>
            }</div>
            {/*Обратите внимание, я пишу комментарий внутри {}, поскольку комментарий - это js*/}
            {/*Мы создали нашу кнопку:)*/}
            <button onClick={this.onAddUserAge}>Постареть!</button>
        <Fragment>
    }
}

export default UserAge
\`\`\`

После того, как вы напишите функцию для этой кнопки, то вы сможете заметить, что при нажатии она меняет показываемый возраст:)

Теперь давайте разберём, как это работает по частям

\`\`\`js
onAddUserAge = (e) => {
    this.setState({
        myAge: this.state.myAge + 1
    })
}
\`\`\`


Функция \`onAddUserAge\` принимает \`event\` объект (точно так-же, как и callback в \`onAddEventListener\` в js),
после этого мы вызываем функцию \`setState\`, доступную в контексте нашего класса (\`this\`), если вы внимательны, то у вас может возникнуть вопрос, как эта функция имеет контект (\`this\`) класса, всё потому, 
что мы используем \`arrow function\` (у неё нет контекста, поэтому она вышестоящий контекст), 
а вышестоящий контект - контекст класса

\`setState\` принимает в себя объект с \`key\` который будет добавлен/изменён (в нашем случае изменён) и \`value\`, которое будет присвоено, и эта функция имеет доступ к контекту класса, поэтому мы можем прочитать текущий \`state.myAge\` и установить новый, но больше на 1 год:) 


> Читай больше о setState на [документации ReactJS](https://reactjs.org/docs/state-and-lifecycle.html) 

Мы разобрались, что значит функция, теперь давайте перейдём к кнопке

\`\`\`js
<button onClick={onAddUserAge}>Постареть!</button>
\`\`\`

\`event onClick\` принимает в себя \`callback\` функцию, которая будет выполнена

> Таких event'oв очень много, полный список читайте [здесь](https://reactjs.org/docs/events.html)

Мы также могли просто вывести что-то в консоль, сделав так:

\`\`\`js
<button onClick={function(event){
    console.log("hello world, мой возраст:", this.state.myAge)
    }
}>Постареть!</button>
\`\`\`

но мы отправили ссылку на функцию, которая объявлена в теле класса

#### Отлично, мы разобрались, как изменить state класса:)
    `,
  },
  {
    /** Lesson id */
    id: 'component-props',
    /** Lesson title */
    title: 'Использование Props (передаваемых свойств) компонента',
    /** is Pure Text */
    body: `
# Свойства (Props)

Свойства используются для того, чтобы передать информацию из одного компонента в другой, это делается очень легко, поэтому сейчас мы рассмотрим, как это сделать.

Перейдите в компонент \`App\` где мы используем наш компонент \`UserAge\` и сделайте следующее:
- В теле компонента передайте свойство вашего имени и пару других свойств
\`\`\`js
    class App extends React.Component {  
        render() { /* обратите внимание, что мы используем {} для передачи любых типов данных, но для строк их можно не писать */
          return <UserAge randomString='{"моя' строка"} nameProp='Моё крутое имя' birthdayYear={2000} />
        }
    }
\`\`\`      

Только что мы передали в компонент UserAge свойства \`nameProps, birthdayYear, randomString\`  

Чтобы получить эти свойства в нашем компоненте \`UserAge\` давайте перейдём к нему и получим его похожим образом, как получали данные из \`state\`
\`\`\`js
import React from 'react'

class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    render() {
        const { randomString, nameProp, birthdayYear} = this.props /* Это называется object-deconstruction */
        return <div>Меня зовут {nameProp}, мой возраст: {this.state.myAge}, я родился в {birthdayYear} году</div>
    }
}

export default UserAge
\`\`\`

\`\`\`js
class UserAge extends React.Component {
    state = {
        myAge: 19
    }
    onAddUserAge = (e) => {
        this.setState({
            myAge: this.state.myAge + 1
        })
    }
    render() {
        const ADULT_AGE = 21;
        const { randomString, nameProp, birthdayYear} = this.props /* Это называется object-deconstruction */
        return <Fragment>
            <div>Меня зовут {nameProp} мой возраст: {this.state.myAge} {
             this.state.myAge >= ADULT_AGE
            ? <span> Я совершеннолетний </span>
            : <span> Я ещё не совершеннолетний </span>
            }
                <span>Я родился в {birthdayYear} году</span>
            </div>
            <button onClick={this.onAddUserAge}>Постареть!</button>
        <Fragment>
    }
}

export default UserAge
\`\`\`

##### Вот таким нехитрым способом вы можете передавать свойства в ваш реакт-компонент

`,
  },
  {
    id: 'end-words',
    title: 'На будущее',
    body: `
    
    `
  },
]
