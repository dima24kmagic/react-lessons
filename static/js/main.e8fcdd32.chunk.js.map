{"version":3,"sources":["app/theme.js","app/PropTypes/PropTypes.js","app/components/SideMenu/SideMenu.js","app/components/CodeBlock/CodeBlock.js","app/components/HtmlParser/HtmlParser.js","app/components/ParsedLesson/ParsedLesson.js","app/components/LessonView/LessonView.js","app/lessonsData/allLessons.js","app/screens/Home/Home.js","app/App.js","serviceWorker.js","index.js"],"names":["theme","createMuiTheme","palette","primary","blue","secondary","main","colors","green","lightGrey","fontFamily","PropTypes","shape","id","string","isRequired","title","body","node","SideMenu","_ref","classes","lessons","currentLessonId","_useState","useState","_useState2","Object","slicedToArray","isOpen","setIsOpen","onMenuToggle","react_default","a","createElement","react","Grid_default","item","className","burgerWrapper","onClick","IconButton_default","style","color","Menu_default","SwipeableDrawer","onClose","onOpen","open","container","direction","lessonsDescription","fullW","Typography_default","gutterBottom","variant","map","_ref2","lessonTitle","lessonId","isCurrent","lessonClassName","cn","lessonName","defineProperty","currentLesson","lessonItemNav","key","Link","to","concat","noWrap","defaultProps","enhance","withStyles","position","top","left","@media (max-width: 560px)","width","right","textDecoration","maxWidth","height","borderRight","background","padding","fontWeight","borderBottom","header","marginBottom","display","alignItems","paddingLeft","transition","cursor","&:hover","transform","CodeBlock","_this$props","this","props","value","language","default_highlight","solarized","React","PureComponent","propTypes","htmlToReactParser","HtmlToReactParser","Parser","HtmlParser","parse","ParsedLesson","lesson","react_markdown_default","source","renderers","code","html","LessonView","root","lessonBody","lessonViewContainer","lessonView","ParsedLesson_ParsedLesson","margin","flexWrap","justifyContent","overflowY","intro","create-react-app","react-setup","first-react-change","component-structure","component-state","set-state","component-props","end-words","lessonsInArray","keys","Home","match","getOr","SideMenu_SideMenu","LessonView_LessonView","App","styles","HashRouter","Switch","Route","path","component","Boolean","window","location","hostname","ReactDOM","render","app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8fcdd32.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core'\nimport { blue } from '@material-ui/core/colors'\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: blue,\n    secondary: {\n      main: '#7c4dff',\n    },\n    colors: {\n      green: '#6BFF83',\n      lightGrey: 'rgba(0,0,0,.3)',\n    },\n  },\n  fontFamily: 'Roboto, Helvetica, Arial, sans-serif',\n})\n\nexport default theme\n","import PropTypes from 'prop-types'\n\nexport const lessonPropType = PropTypes.shape({\n  /** Lesson id */\n  id: PropTypes.string.isRequired,\n  /** Lesson title */\n  title: PropTypes.string.isRequired,\n  /** Body in md format */\n  body: PropTypes.string.isRequired,\n})\n\nexport const childrenPropType = PropTypes.node\n","import React, { Fragment, useState } from 'react'\nimport { arrayOf, shape, string } from 'prop-types'\nimport { withStyles } from '@material-ui/core'\nimport Grid from '@material-ui/core/Grid/Grid'\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcn from '@material-ui/icons/Menu'\nimport Typography from '@material-ui/core/Typography'\nimport { Link } from 'react-router-dom'\nimport SwipeableDrawer from '@material-ui/core/es/SwipeableDrawer/SwipeableDrawer'\nimport { lessonPropType } from '../../PropTypes/PropTypes'\n\nconst propTypes = {\n  /** Current lesson in URL */\n  currentLessonId: string.isRequired,\n  /** All lessons */\n  lessons: arrayOf(lessonPropType),\n  /** @ignore */\n  classes: shape().isRequired,\n}\n\nconst defaultProps = {\n  lessons: [],\n}\n\nconst styles = {\n  burgerWrapper: {\n    position: 'fixed',\n    top: 11,\n    left: 18,\n    '@media (max-width: 560px)': {\n      width: 52,\n      right: 0,\n      top: 0,\n      left: 'auto',\n    },\n  },\n\n  // Styling of a side menu content\n  fullW: {\n    width: '100%',\n    textDecoration: 'none',\n  },\n\n  lessonsDescription: {\n    width: 380,\n    maxWidth: '80vw',\n    height: '100%',\n    borderRight: '1px solid #424242',\n    background: '#262b33',\n  },\n  title: {\n    padding: '24px 0 24px 16px',\n    fontWeight: 800,\n    color: '#0099ff',\n    borderBottom: '1px solid #424242',\n  },\n  header: {\n    marginBottom: 8,\n  },\n\n  lessonItemNav: {\n    display: 'flex',\n    alignItems: 'center',\n    height: 32,\n    paddingLeft: '32px',\n    maxWidth: '100%',\n    width: '100%',\n  },\n  lessonName: {\n    maxWidth: '100%',\n    color: '#71717a',\n    transition: 'color .15s, transform .15s',\n    cursor: 'pointer',\n    '&:hover': {\n      color: '#b6b6c4',\n      transform: 'translateX(4px)',\n    },\n  },\n  currentLesson: {\n    color: '#0099ff',\n  },\n}\n\n/**\n * Side menu component with navigation in it\n */\nfunction SideMenu({ classes, lessons, currentLessonId }) {\n  const [isOpen, setIsOpen] = useState(true)\n  const onMenuToggle = () => {\n    setIsOpen(!isOpen)\n  }\n\n  const renderLessonTitleLinks = () =>\n    lessons.map(({ title: lessonTitle, id: lessonId }) => {\n      const isCurrent = currentLessonId === lessonId\n      const lessonClassName = cn(classes.lessonName, {\n        [classes.currentLesson]: isCurrent,\n      })\n      return (\n        <Grid item className={classes.lessonItemNav} key={lessonId}>\n          <Link\n            to={`/${lessonId}`}\n            className={classes.fullW}\n            onClick={onMenuToggle}\n          >\n            <Typography\n              title={lessonTitle}\n              variant=\"body1\"\n              noWrap\n              className={lessonClassName}\n            >\n              {lessonTitle}\n            </Typography>\n          </Link>\n        </Grid>\n      )\n    })\n\n  return (\n    <Fragment>\n      <Grid item className={classes.burgerWrapper} onClick={onMenuToggle}>\n        <IconButton style={{ color: '#00555f' }}>\n          <MenuIcn />\n        </IconButton>\n      </Grid>\n      <SwipeableDrawer\n        onClose={onMenuToggle}\n        onOpen={onMenuToggle}\n        open={isOpen}\n      >\n        <Grid\n          container\n          direction=\"column\"\n          className={classes.lessonsDescription}\n        >\n          <Grid item className={classes.fullW}>\n            <Typography gutterBottom variant=\"title\" className={classes.title}>\n              Основы ReactJS\n            </Typography>\n          </Grid>\n          <Grid item className={classes.fullW}>\n            <Grid container direction=\"column\">\n              {renderLessonTitleLinks()}\n            </Grid>\n          </Grid>\n        </Grid>\n      </SwipeableDrawer>\n    </Fragment>\n  )\n}\n\nSideMenu.propTypes = propTypes\nSideMenu.defaultProps = defaultProps\n\nconst enhance = withStyles(styles)\n\nexport default enhance(SideMenu)\n","import React from 'react'\nimport { string } from 'prop-types'\nimport SyntaxHighlighter from 'react-syntax-highlighter'\nimport { docco } from 'react-syntax-highlighter/dist/esm/styles/hljs'\nimport solarized from 'react-syntax-highlighter/dist/esm/styles/prism/solarizedlight'\nimport base16 from 'react-syntax-highlighter/dist/esm/styles/prism/base16-ateliersulphurpool.light'\nimport duotoneLight from 'react-syntax-highlighter/dist/esm/styles/prism/duotone-light'\n\nclass CodeBlock extends React.PureComponent {\n  render() {\n    const { value, language } = this.props\n    return (\n      <div className=\"code-block\">\n        <SyntaxHighlighter language={language} style={solarized}>\n          {value}\n        </SyntaxHighlighter>\n      </div>\n    )\n  }\n}\n\nCodeBlock.propTypes = {\n  value: string.isRequired,\n  language: string.isRequired,\n}\n\nexport default CodeBlock\n","import React from 'react'\nimport { string } from 'prop-types'\nimport HtmlToReactParser from 'html-to-react'\n\nconst propTypes = {\n  value: string.isRequired,\n}\n\n/**\n * HTML parser\n */\nconst htmlToReactParser = new HtmlToReactParser.Parser()\nfunction HtmlParser({ value }) {\n  const reactElement = htmlToReactParser.parse(value)\n  return reactElement\n}\n\nHtmlParser.propTypes = propTypes\n\nexport default HtmlParser\n","import React from 'react'\nimport ReactMarkdown from 'react-markdown'\n\nimport CodeBlock from '../CodeBlock'\nimport HtmlParser from '../HtmlParser/HtmlParser'\nimport { lessonPropType } from '../../PropTypes/PropTypes'\n\nconst propTypes = {\n  lesson: lessonPropType.isRequired,\n}\n\nconst defaultProps = {}\n\nfunction ParsedLesson({ lesson }) {\n  return (\n    <ReactMarkdown\n      source={lesson.body}\n      renderers={{ code: CodeBlock, html: HtmlParser }}\n    />\n  )\n}\n\nParsedLesson.propTypes = propTypes\nParsedLesson.defaultProps = defaultProps\n\nexport default ParsedLesson\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { withStyles } from '@material-ui/core/styles'\nimport Grid from '@material-ui/core/Grid/Grid'\nimport ParsedLesson from '../ParsedLesson'\nimport { lessonPropType } from '../../PropTypes/PropTypes'\n\nconst propTypes = {\n  currentLesson: lessonPropType.isRequired,\n  /** @ignore */\n  classes: PropTypes.shape().isRequired,\n}\n\nconst defaultProps = {}\n\nconst styles = {\n  root: {\n    background: '#262b33',\n    width: '100%',\n    height: '100vh',\n    margin: '0 auto',\n    flexWrap: 'nowrap',\n  },\n\n  lessonBody: {\n    width: '100%',\n    background: '#fbfbfb',\n  },\n  lessonViewContainer: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: '36px 48px 0',\n    height: '100%',\n    width: '100%',\n    overflowY: 'auto',\n    '@media (max-width: 560px)': {\n      padding: '24px 8px 0',\n    },\n  },\n  lessonView: {\n    maxWidth: 1050,\n    width: '100%',\n    height: '100%',\n  },\n}\n\n/**\n * Lessons grouped in section\n */\nexport function LessonView({ classes, currentLesson }) {\n  return (\n    <Grid container className={classes.root}>\n      <Grid item className={classes.lessonBody}>\n        <Grid container className={classes.lessonViewContainer}>\n          <Grid item className={classes.lessonView}>\n            <ParsedLesson lesson={currentLesson} />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  )\n}\n\nLessonView.propTypes = propTypes\nLessonView.defaultProps = defaultProps\n\nconst enhance = withStyles(styles)\n\nexport default enhance(LessonView)\n","export const lessons = {\n  intro: {\n    id: 'intro',\n    title: 'NodeJS и NPM',\n    body: `\n# NodeJS и NPM\n\nДля того, чтобы создать ваше первое React приложение для начала вам понадобиться:  \n- [NodeJS](https://nodejs.org/en/)\n- npm - должен установиться вместе с NodeJS  \n\nПосле того, после установки NodeJS проверьте, что всё поставилось правильно, для этого введите в терминале\n\n\\`\\`\\`sh\n$ node -v\n$ npm -v\n\\`\\`\\`\nЭти две комманды должны вывести версию установленных пакетов.  \n    `,\n  },\n\n  'create-react-app': {\n    id: 'create-react-app',\n    title: 'create-react-app',\n    body: `\n# create-react-app\n\nПосле установки NodeJS и NPM, нужно установить create-react-app (сетаппер react приложений от facebook).\nДля того, чтобы это сделать, введите в терминале\n\n\\`\\`\\`sh\n$ npm install -g create-react-app         (Это установит crate-react-app на вашу систему *если вы на системе Linux/MacOS, перед коммандой введите sudo)\n$ create-react-app -v                     (Проверка что пакет установился нормально)\n\\`\\`\\`\n    `,\n  },\n  'react-setup': {\n    /** Lesson id */\n    id: 'react-setup',\n    /** Lesson title */\n    title: 'Привет React',\n    /** is Pure Text */\n    body: `\n# Добро пожаловать на уроки реакта!  \n\nЯ думаю, что вы уже знаете, что такое ReactJS, А если нет, то рекоммендую к прочтению [статьи о ReactJS](https://teletype.in/@rupper/BJEtj2djX)\n\nДавайте приступим к созданию первого приложения, для этого:  \n\n- Перейдите в терминале в нужную вам директорию и запустите  \n\n\\`\\`\\`sh\n$ create-react-app testing\n\\`\\`\\`\nЭта комманда создаст все необходимые файлы и настроит нужные тулы, чтобы реакт-приложение могло ожить:)\n\n- После того, как приложение создасться, перейдите в терминале в созданную директорию и введите\n\\`\\`\\`sh\n$ npm start\n\\`\\`\\`\n\nПосле этой комманды должно открыться окно браузера с адресом [http://localhost:3000](http://localhost:3000)\n\nЕсли окно браузера не открылось - попробуйте открыть его самостоятельно (кликните на ссылку, которую я выделил)\n\nПосле всех действий у вас должно быть стартовое окно с сообщением от React-разработчиков, поздравляю, вы только что создали своё первое React-приложение:)\n`,\n  },\n  'first-react-change': {\n    /** Lesson id */\n    id: 'first-react-change',\n    /** Lesson title */\n    title: 'Первый компонент',\n    /** is Pure Text */\n    body: `\n# Теперь давайте напишем ваш первый реакт компонент!  \n\nДля того, чтобы это сделать, перейдите в созданную директорию проекта  \nи перейдите к файлу **\\`/src/App.js\\`**\n\nСотрите всё, что там будет сгенерировано и вставьте этот код  \n\n\\`\\`\\`js\nimport React, { Component } from 'react';\n\nclass App extends Component { /* Создаём класс наследуемый от класса Component, доступный из библиотеки React*/\n  render() { /* Перезаписываем метод render и возвращаем, что нам нужно */\n     return <div>Мой первый реакт компонент!</div>  \n  }\n}  \n\nexport default App\n\\`\\`\\`\n\n P.S. Только что вы создали ваш первый реакт компонент. Думаю, что если вы были внимательны,\n то уже заметили, как выглядит структура простейшего реакт компонента;)\n  `,\n  },\n  'component-structure': {\n    /** Lesson id */\n    id: 'component-structure',\n    /** Lesson title */\n    title: 'Разбор структуры компонента',\n    /** is Pure Text */\n    body: `\n# Структура  \n\nНаверняка при прошлом уроке у вас возникло ощущение, что в функции render, \nвозвращаемое значение очень уж похоже на обычный html.\nУ меня для вас новости, вы не ошиблись!) Однако возвращается не html, \nа [**jsx** (JavaScript XML)](https://stackoverflow.com/questions/39461805/what-does-jsx-stand-for), \nкоторый потом [webpack](https://survivejs.com/webpack/what-is-webpack/)(бандлер, который настраивается автоматически\nс помощью create-react-app и про который вам не обязательно знать в начале) \nтранслирует в javascript код, и дальше этот js код реакт размещает на вашей веб-странице  \n  \nТак же, как вы наверняка заметили, реакт компонент - это js класс, который наследуется от React класса **Component**\nИ метод render - это наследуемый метод этот класса, который мы можем перезаписать, и вовращать всё, что нам надо:)\n\n\\`\\`\\`js\nvar React, {Component} = require('react');\nclass App extends React.Component {\n  render() { /*<---- А это наш render метод, наследуемый от Component класса, предоставленного реактом*/\n    return <div>Это JSX который webpack превращает в обычный JS код</div>  \n  }\n}  \n\\`\\`\\`\nПо сути, это всё, что вам нужно знать для начала работы с реактом, для создания компонента нужно создать класс, дать ему имя,\nнаследовать его от класса Component и перезаписать метод render()\n`,\n  },\n  'component-state': {\n    /** Lesson id */\n    id: 'component-state',\n    /** Lesson title */\n    title: 'State React-Компонента',\n    /** is Pure Text */\n    body: `\n# Что такое state?\n  \n>  State - любая необходимая информация, котоую может хранить и изменять ваш компонент, например: (текущее время, прдменты которые пользователь выбрал в онлайн магазине) \n\nДавайте посмотрим, как использовать state в нашем реакт приложении  \n(Я рассчитываю, что ваше реакт приложение запущено, а если нет, то перейдите с помощью терминала в директорию с этим приложением и запустите в консоли след. команду)\n\n\\`npm start\\` - это запустит ваш dev server и откроет окно в браузере с вашим приложением\n\nПосле этого, чтобы узнать, какой компонент редериться на вашей странице, перейдите к файлу:  \\`src/index.js\\`\nи посмотрите, где размещается файл в теле метода \\`ReactDOM.render\\`\n\n\\`\\`\\`js  \nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App' /* Перейдите к этомму файлу, чтобы редактировать компонент, который рендериться на вашем экране */\n\nReactDOM.render(<App />, document.getElementById('root'))\n\\`\\`\\`\n\nПосле того, как вы открыли файд App.js с компонентом App (компонент, который генерируются автоматически с помощью **create-react-app**)\n\nДавайте создадим рядом с ним свой компонент, который будет показывать ваш возраст:), для этого:  \n\n1. Создайте файл \\`UserAge.js \\`\n2. В создавшемся файле создайте класс \\`UserAge\\`, который наследуется от класса \\`Component\\` (то, что мы делали в уроках выше), и перезапишите метод \\`render\\`, чтобы он возвращал:\n\n\\`\\`\\`js\n<div>Мой возраст: (здесь будет мой возраст)</div>\n\\`\\`\\`\n\n3. После этого экспортируйте ваш класс, для этого напишите \\`export default UserAge\\` в конце файла \\`UserAge\\`\n\n\n\\`\\`\\`js\nimport React from 'react'\n\nclass UserAge extends React.Component {...}\n\nexport default UserAge /*Экспорт и импорт файлов доступен благодоря настроенного с помощью create-react-app webpack-бандлера */\n\\`\\`\\`\n  \n4. Перейдите обратно к компоненту \\`App\\`, импортируйте компонент \\`UserAge\\` и используйте его точно так-же, если бы использовали обычный html компонент\n\n\n\\`\\`\\`js\nimport React from 'react'\nimport UserAge from './UserAge'\n\nclass App extends React.Component {\n    render() { /*Использование экспортированных React-Компонентов*/\n        return <UserAge />\n    }\n}\n\\`\\`\\`\n\n### Если всё прошло хорошо, то на вашем экране должно появиться сообщения из \\`render\\` метода компонента \\`UserAge\\`\n\nТеперь давайте перейдём к **одной из самый фундаментальных частей реакта**, использованию \\`состояния*\\` компонента\n> *чтобы вас не пугало состояние компонента, можете про себя говорить, состояние - это хранение информации внутри компонента:)\n\nСнова откройте файл \\`UserAge \\`\n\nСостояние компонента как правило храниться в js объекте, и для того, чтобы создать его, перед методом \\`render\\` в классе \\`UserAge\\` напишите\n\n\\`\\`\\`js\nstate = {\n    myAge: 19\n}\n\\`\\`\\` \n\nДолжно получиться примерно так:\n\n\\`\\`\\`js\nimport React from 'react'\n\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    render() {\n        return <div>Мой возраст: (здесь будет мой возраст)</div>\n    }\n}\n    \nexport default UserAge\n\\`\\`\\`\n\nЧто же нужно сделать, чтобы использовать то самое поле \\`myAge\\` из объекта \\`state\\` в теле метода \\`render\\`?  \n\nДля этого в \\`JSX\\` нужно использовать curly braces это они -> \\`{}\\`, давайте я покажу наглядно, чтобы вы могли это увидеть и попробовать\n\n\\`\\`\\`js\nimport React from 'react'\n\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    render() { /* Здесь используются {} */\n        return <div>Мой возраст: {this.state.myAge}</div>\n    }\n}\n\nexport default UserAge\n\\`\\`\\`  \n\nТеперь ваш компонент должен выводить ваш возраст, поздравляю, вы только что использовали фундаментальную вещь, без которой практически невозможна реакт-разработка:)  \n\nВнутри \\`{}\\` вы можете писать \\`любые* js выражения\\` \n> *любые, но главное условие - оттуда должно возвращаться какое-то значение (\\`jsx/string/number/etc\\`), например:\n\n> *Писать JS Expressions можно только внутри компонентов\n\n\\`\\`\\`js\nimport React from 'react'\n\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    render() {\n        return <div> Мой возраст: {this.state.myAge} { // По сути, внутри {} в JSX вы можете писать обычный JavaScript код\n        this.state.myAge >= 18\n        ? <span> Я совершеннолетний </span> // Это тернарный оператор\n        : <p> Я ещё не совершеннолетний </p>\n        }</div>\n    }\n}\n\nexport default UserAge\n\\`\\`\\`    \n   \n#### **Теперь вы можете использовать State внутри компонентов, круто! Но нам как-то нужно изменить наш возраст**\n  `,\n  },\n  'set-state': {\n    id: 'set-state',\n    title: 'Давайте изменим State',\n    body: `\n# Давайте изменим \\`State\\`\n\nВ прошлом уроке мы создали компонент \\`UserAge\\`, который показывал наш возраст, а так же говорил, совершеннолитний пользователь, или нет\n\nВ идеальном мире нам ничего не пришлось бы и менять, однако вечно молодыми мы не сможем остаться, поэтому придётся добавить кнопку **\"Постареть\"**, которая будет добавлять нам год возраста:)\n\n> NOTE: \\`render\\` метод может возвращать **только 1 JSX компонент**  \n\nПоскольку наш рендер метод может возвращать только один компонент, а мы не хотим захламлять наш HTML документ лишними дивами, мы обернём возвращаемые значения в \\`Fragment\\` компонент, предоставляемый реактом\n\n> По сути \\`Fragment\\` используется, чтобы не возвращать лишний \\`div\\`, который нужен, чтобы из рендер метода возвращался только 1 компонент\n\n\\`\\`\\`js\nimport React, { Fragment } from 'react' /* Обратите внимание, что мы импортируем Fragment компонент */\n\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    render() {\n        const ADULT_AGE = 21;\n        return <Fragment>\n            <div> Мой возраст: {this.state.myAge} { // По сути, внутри {} в JSX вы можете писать обычный JavaScript код\n             this.state.myAge >= ADULT_AGE\n            ? <span> Я совершеннолетний </span> // Это тернарный оператор\n            : <span> Я ещё не совершеннолетний </span>\n            }</div>\n            {/*Обратите внимание, я пишу комментарий внутри {}, поскольку комментарий - это js*/}\n            {/*Мы создали нашу кнопку:)*/}\n            <button>Постареть!</button>\n        <Fragment>\n    }\n}\n\nexport default UserAge\n\\`\\`\\`\nПока что наша кнопка не может ничего сделать, поэтому давайте я расскажу про \\`setState\\`\n\n#### \\`setState\\` Используется, чтобы изменить значение объекта \\`state\\` компонента,\n\nНе буду томить, покажу, как мы можем это использовать \n\n\\`\\`\\`js\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    // создадим callback, который будет срабатывать по нажатию на кнопку\n    // NOTE: я использую arrow function, поэтому контект этой функции (this), будет принадлежать классу\n    onAddUserAge = (e) => {\n        this.setState({\n            myAge: this.state.myAge + 1\n        })\n    }\n    render() {\n        const ADULT_AGE = 21;\n        return <Fragment>\n            <div> Мой возраст: {this.state.myAge} { // По сути, внутри {} в JSX вы можете писать обычный JavaScript код\n             this.state.myAge >= ADULT_AGE\n            ? <span> Я совершеннолетний </span> // Это тернарный оператор\n            : <span> Я ещё не совершеннолетний </span>\n            }</div>\n            {/*Обратите внимание, я пишу комментарий внутри {}, поскольку комментарий - это js*/}\n            {/*Мы создали нашу кнопку:)*/}\n            <button onClick={this.onAddUserAge}>Постареть!</button>\n        <Fragment>\n    }\n}\n\nexport default UserAge\n\\`\\`\\`\n\nПосле того, как вы напишите функцию для этой кнопки, то вы сможете заметить, что при нажатии она меняет показываемый возраст:)\n\nТеперь давайте разберём, как это работает по частям\n\n\\`\\`\\`js\nonAddUserAge = (e) => {\n    this.setState({\n        myAge: this.state.myAge + 1\n    })\n}\n\\`\\`\\`\n\n\nФункция \\`onAddUserAge\\` принимает \\`event\\` объект (точно так-же, как и callback в \\`onAddEventListener\\` в js),\nпосле этого мы вызываем функцию \\`setState\\`, доступную в контексте нашего класса (\\`this\\`), если вы внимательны, то у вас может возникнуть вопрос, как эта функция имеет контект (\\`this\\`) класса, всё потому, \nчто мы используем \\`arrow function\\` (у неё нет контекста, поэтому она вышестоящий контекст), \nа вышестоящий контект - контекст класса\n\n\\`setState\\` принимает в себя объект с \\`key\\` который будет добавлен/изменён (в нашем случае изменён) и \\`value\\`, которое будет присвоено, и эта функция имеет доступ к контекту класса, поэтому мы можем прочитать текущий \\`state.myAge\\` и установить новый, но больше на 1 год:) \n\n\n> Читай больше о setState на [документации ReactJS](https://reactjs.org/docs/state-and-lifecycle.html) \n\nМы разобрались, что значит функция, теперь давайте перейдём к кнопке\n\n\\`\\`\\`js\n<button onClick={onAddUserAge}>Постареть!</button>\n\\`\\`\\`\n\n\\`event onClick\\` принимает в себя \\`callback\\` функцию, которая будет выполнена\n\n> Таких event'oв очень много, полный список читайте [здесь](https://reactjs.org/docs/events.html)\n\nМы также могли просто вывести что-то в консоль, сделав так:\n\n\\`\\`\\`js\n<button onClick={function(event){\n    console.log(\"hello world, мой возраст:\", this.state.myAge)\n    }\n}>Постареть!</button>\n\\`\\`\\`\n\nно мы отправили ссылку на функцию, которая объявлена в теле класса\n\n#### Отлично, мы разобрались, как изменить state класса:)\n    `,\n  },\n  'component-props': {\n    /** Lesson id */\n    id: 'component-props',\n    /** Lesson title */\n    title: 'Использование Props (передаваемых свойств) компонента',\n    /** is Pure Text */\n    body: `\n# Свойства (Props)\n\nСвойства используются для того, чтобы передать информацию из одного компонента в другой, это делается очень легко, поэтому сейчас мы рассмотрим, как это сделать.\n\nПерейдите в компонент \\`App\\` где мы используем наш компонент \\`UserAge\\` и сделайте следующее:\n- В теле компонента передайте свойство вашего имени и пару других свойств\n\\`\\`\\`js\n    class App extends React.Component {  \n        render() { /* обратите внимание, что мы используем {} для передачи любых типов данных, но для строк их можно не писать */\n          return <UserAge randomString='{\"моя' строка\"} nameProp='Моё крутое имя' birthdayYear={2000} />\n        }\n    }\n\\`\\`\\`      \n\nТолько что мы передали в компонент UserAge свойства \\`nameProps, birthdayYear, randomString\\`  \n\nЧтобы получить эти свойства в нашем компоненте \\`UserAge\\` давайте перейдём к нему и получим его похожим образом, как получали данные из \\`state\\`\n\\`\\`\\`js\nimport React from 'react'\n\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    render() {\n        const { randomString, nameProp, birthdayYear} = this.props /* Это называется object-deconstruction */\n        return <div>Меня зовут {nameProp}, мой возраст: {this.state.myAge}, я родился в {birthdayYear} году</div>\n    }\n}\n\nexport default UserAge\n\\`\\`\\`\n\n\\`\\`\\`js\nclass UserAge extends React.Component {\n    state = {\n        myAge: 19\n    }\n    onAddUserAge = (e) => {\n        this.setState({\n            myAge: this.state.myAge + 1\n        })\n    }\n    render() {\n        const ADULT_AGE = 21;\n        const { randomString, nameProp, birthdayYear} = this.props /* Это называется object-deconstruction */\n        return <Fragment>\n            <div>Меня зовут {nameProp} мой возраст: {this.state.myAge} {\n             this.state.myAge >= ADULT_AGE\n            ? <span> Я совершеннолетний </span>\n            : <span> Я ещё не совершеннолетний </span>\n            }\n                <span>Я родился в {birthdayYear} году</span>\n            </div>\n            <button onClick={this.onAddUserAge}>Постареть!</button>\n        <Fragment>\n    }\n}\n\nexport default UserAge\n\\`\\`\\`\n\n##### Вот таким нехитрым способом вы можете передавать свойства в ваш реакт-компонент\n\n`,\n  },\n  'end-words': {\n    id: 'end-words',\n    title: 'На будущее',\n    body: `\n# Слова на будущее\n\nВот вы и подошли к концу изучения основ реакта, то, что описано вверху этих уроков - лишь фундаментальные знания, которых хватит, чтобы писать ооочень простые приложения на реакте:) Однако, это база, которую нужно понимать очень хорошо, так как все бодее продвинутые паттерны лежать именно на этих знаниях\n\nНадеюсь, что тот, кто читал это - не остался без вопросов, потому что если вы остались без вопросов - значит, скорее всего, у вас их так много, что вы ничего не поняли XD, для углубления своих знаний рекоммендую следующие ресурсы:\n\n- [Medium - блог, в том числе есть очень много информации по реакту](https://medium.com)\n- [course-hunters - сайт со многими курсами (в том числе и по реакту)](https://coursehunters.net/)\n- [Оффициальная документация React(очень хорошо написанная)](https://reactjs.org/)\n\n# Cпасибо, что учили эти уроки, если у вас есть, что дополнить - кидайте ваши pull реквесты [в этот репозиторий](https://github.com/dima24kmagic/react-lessons)\n    `,\n  },\n}\n\nexport const lessonsInArray = Object.keys(lessons).map(\n  lessonId => lessons[lessonId],\n)\n","import React, { Fragment } from 'react'\nimport { getOr } from 'lodash/fp'\nimport PropTypes from 'prop-types'\n\nimport SideMenu from '../../components/SideMenu'\nimport LessonsSection from '../../components/LessonView'\nimport { lessons, lessonsInArray } from '../../lessonsData/allLessons'\n\nfunction Home({ match }) {\n  const currentLessonId = getOr('intro', ['params', 'id'], match)\n  const currentLesson = lessons[currentLessonId]\n  return (\n    <Fragment>\n      <SideMenu currentLessonId={currentLessonId} lessons={lessonsInArray} />\n      <LessonsSection currentLesson={currentLesson} />\n    </Fragment>\n  )\n}\n\nHome.propTypes = {\n  /* Match URL param from Router */\n  match: PropTypes.shape({}).isRequired,\n}\n\nexport default Home\n","import React, { Fragment } from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport { MuiThemeProvider } from '@material-ui/core'\nimport theme from './theme'\nimport Home from './screens/Home/Home'\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={theme}>\n      <HashRouter>\n        <Fragment>\n          <Switch>\n            <Route path=\"/:id\" component={Home} />\n            <Route path=\"/\" component={Home} />\n          </Switch>\n        </Fragment>\n      </HashRouter>\n    </MuiThemeProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './app/App'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}